anadido linea if para comprobar si existen palabras aparte del comando
para comprobar si son directorios o ficheros. linea 93 executer_utills(ft_file_or_directory)

anadido if al principio del filtro de comandos por si viene string vacio
linea 43-44 de executer_utils(ft_comand_filter).

Anadida llamada a ft_clean_path en linea 101 de executer (executer)
Corresponde a llamada de ft_path en linea 19 de executer (ft_execute)
anadido prototipo correspondiente de celan path en linea 98 de .h

linea 30 de executer(ft_execute), cambiada flag del waipid a WUNTRACED.
Esto es una gitanada y deberiamos en realidad informar el pid con un 
WIFEXITED despues y status y blalablabla, pero creo que funciona.

---------05.06----------------

Las redirecciones no se hacian bien con un unico comando builtin.
Ahora se redirecciona al principio y al final de forma general
Añadida llamada a ft_child_redir en linea 40 de executer(ft_execute_one).
Añadido fdin y fdout a la estrucutra de data en .h
Añadida dup y dup2 para data->fdin y data->fdout en executer.
corregido data->fd a data->fdout en linea 109 de executer_utils(ft_no_cmd).

REDIRECCIONES DE SALIDA SOLAS PETAN

<a
bash: a: No such file or directory

----------05.07------------------

Redirecciones simples de entrada cuando el fichero no es accesible.
No daba mensaje ni interrumpia el proceso con el statu adecuado.
Cambios:
    -Añadida condicion al if en linea 76-77 del executer para que pare el proceso si infile tiene un -1 (se podria quiza blidnar tambine outfile) y pase a limpiar.
    -Añadida en linea 53 de parser (ft_noduler) condicion if, si el infile es -1 return para salir del parser. Va ligado al siguinete cambio.
    -Añadida conficion extra if en lineas 59-63 de parser-redir(ft_redir_in) para lanzar funcion que cambie estado y printee en caso de que infile no sea accesible
    -Añadida nueva función en parser redir 15.24 (ft_no_file_or_dir) que se encarga de printear mensaje, actualizar data->status y liberar prompt en caso de que la redirección halla salido mal.